- name: Install Tomcat 10

  hosts:
    - webserver_tomcat
    
  gather_facts: false
  
  vars_files:
    - variables/provision.yml
    - variables/secrets.yml

  vars:
     JAVA_HOME: "{{ aws.instance.programs.install.dir.path }}/{{ aws.instance.java.root.dir.name }}"  
     CATALINA_HOME: "{{ aws.instance.programs.install.dir.path }}/{{ aws.instance.tomcat.root.dir.name }}"
    
  pre_tasks:
  
    - name: Get datacenter.json content
      set_fact:
        datacenter_config: "{{ lookup('file', '{{ datacenter_dir }}/config/datacenter.json') | from_json }}"
          
    - name: Get instance DNS domain
      set_fact:
        instance_dns_domain: '{{ datacenter_config | json_query(jquery) }}'
      vars:
        jquery: 'Datacenter.Instances[?Name==''{{ instance_name }}''] | [0].DnsDomain'  
     
    - name: Controller host configuration
      ansible.builtin.debug:
        msg:
          - 'SSH instance port: {{ ansible_port }}'
          - 'SSH instance user: {{ ansible_user }}'
          - 'SSH instance key: {{ ansible_private_key_file }}'
          - 'Java version: {{ aws.instance.java.version }}'
          - 'Java home: {{ JAVA_HOME }}' 
          - 'Tomcat version: {{ aws.instance.tomcat.version }}'   

    - name: Fetch Java version
      shell: source /etc/profile; java -version 2>&1 | grep version | awk '{print $3}' | sed 's/"//g'
      register: java_version
          
    - name: "Fetch JAVA_HOME"
      shell: source /etc/profile; dirname $(dirname $(readlink -f $(which javac)))
      register: java_home
        
    - assert:
        that:
          - java_version.stdout | length > 0 and java_version.stdout is version_compare('18', '>=') 
          - java_home.stdout | length > 0 and java_home.stdout == JAVA_HOME  
          
    - name: 'Test it! https://{{ instance_dns_domain }}:8443/'
      become: false
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:8443/'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      ignore_errors: true
       
    - name: End the play if Tomcat test page is online
      ansible.builtin.meta: end_play
      when:
        - "'successfully installed Tomcat' in result.content"
                 
    - name: Create download directory
      become: true
      ansible.builtin.file:
        path: '{{ aws.instance.download.dir.path }}'
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: 488  
                               
  tasks:
  
    - name: Add group "tomcat"
      group: name='{{ tomcat_group }}'
      become: true
      become_method: sudo  

    - name: Add user "tomcat"
      user: name='{{ tomcat_user }}' group='{{ tomcat_group }}' home=/usr/share/'{{ tomcat_user }}' createhome=no
      become: true
      become_method: sudo  
  
    - name: Download Tomcat
      get_url:
        url: "{{ aws.instance.tomcat.download.url }}"
        dest: "{{ aws.instance.download.dir.path }}/apache-tomcat.tar.gz"

    - name: Unzip the downloaded file
      become: true
      unarchive:
        src: "{{ aws.instance.download.dir.path }}/apache-tomcat.tar.gz"
        dest: "{{ aws.instance.programs.install.dir.path }}"
        remote_src: true
                
    - name: Configure Tomcat server
      become: true
      become_method: sudo  
      ansible.builtin.template:
        src: tomcat/server.xml.j2
        dest: "{{ CATALINA_HOME }}/conf/server.xml"   

    - name: Configure Tomcat users
      become: true
      become_method: sudo  
      ansible.builtin.template:
        src: tomcat/tomcat-users.xml.j2
        dest: "{{ CATALINA_HOME }}/conf/tomcat-users.xml"  
            
    - name: Create Tomcat ssl directory
      become: true
      ansible.builtin.file:
        path: '{{CATALINA_HOME }}/ssl'
        state: directory
        
    - name: Put keytool in PATH
      become: true
      become_method: sudo  
      ansible.builtin.file:
        src: "{{ JAVA_HOME }}/bin/keytool"
        dest: '/usr/bin/keytool'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        state: link 
        
    - name: Create Tomcat tls certificates
      become: true
      ansible.builtin.command: 'openssl req -new -x509 -nodes -out tomcat.crt -keyout tomcat.key -subj /CN={{ instance_dns_domain }} -days 365'
      args:
        chdir: '{{ aws.instance.download.dir.path }}'        
      
    - name: Create a keystore for the given certificate/private key pair (with files on the host)
      become: true
      become_method: sudo 
      community.general.java_keystore:
        name: example
        certificate_path: "{{ aws.instance.download.dir.path }}/tomcat.crt"
        private_key_path: "{{ aws.instance.download.dir.path }}/tomcat.key"
        password: "{{ tomcat_keystore_password }}"
        dest: '{{ CATALINA_HOME }}/ssl/{{ aws.instance.tomcat.tls.keystore.file }}'  
   
    - name: Change ownership of Tomcat installation
      file: path="{{ CATALINA_HOME }}" owner="{{ tomcat_user }}" group="{{ tomcat_group }}" state=directory recurse=yes  
      become: true
      become_method: sudo           
           
    - name: Install Tomcat systemd service script
      become: true
      become_method: sudo  
      ansible.builtin.template:
        src: tomcat/tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
        mode: 0755   
                                
    - name: Force systemd to reread configs
      become: true
      become_method: sudo 
      ansible.builtin.systemd_service:
        daemon_reload: true           
    
    - name: Make sure a service unit is running
      become: true
      become_method: sudo     
      ansible.builtin.systemd_service:
        state: restarted
        enabled: true
        name: tomcat    
        
    - name: 'Test it! https://{{ instance_dns_domain }}:8444/'
      become: false
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:8444/'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      ignore_errors: true        
                 
  post_tasks:
  
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: '{{ aws.instance.download.dir.path }}'
        state: absent   

  handlers:
    - name: Restart Tomcat
      ansible.builtin.service:
        name: tomcat
        state: restarted                         
                      
